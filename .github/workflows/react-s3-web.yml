# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to AWS

on:
  # Runs on pushes targeting the default branch
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - 'app/**' 

jobs:
  terraform:
    name: push web on s3
    runs-on: ubuntu-latest
    steps:
      - name: Get repository name
        run: echo "REPO=$(echo ${{ github.repository }} | cut -d'/' -f 2 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Move your files to a temporary directory
        run: |
          mkdir -p ../temp
          mv app/* ../temp
 
      - name: Checkout private tools
        uses: actions/checkout@v4
        with:
          repository: pro-padel/pro-padel-app-infra-cloud
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20' 

      - name: Replace $REPO in main.tf
        run: |
          cd aws-s3
          ls
          sed -i "s/\$REPO/${{ env.REPO }}/g" main.tf
          cat main.tf

      - name: Replace $REPO in variables.tf
        run: |
          cd aws-s3
          sed -i "s/\$REPO/${{ env.REPO }}/g" variables.tf

      - name: Replace $DOMINIO in variables.tf
        if: false
        run: |
          cd aws-s3
          sed -i "s/\$DOMINIO/${{ vars.DOMINIO }}/g" route53.tf

      - name: Replace $DOMINIO in variables.tf
        if: false
        run: |
          cd aws-s3
          sed -i "s/\$DOMINIO/${{ vars.DOMINIO }}/g" cloudfront.tf

      - name: Buld y mover todos los files
        run: |
            ls
            pwd
            cd ../temp
            npm ci
            npm run build
            cd dist
            ls ../../../
            mkdir ../../$REPO/aws-s3/web
            mv * ../../$REPO/aws-s3/web/

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.1.7

      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID_JULIMAXSOFT }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY_JULIMAXSOFT }}" >> ~/.aws/credentials
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_JULIMAXSOFT }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_JULIMAXSOFT }}
          aws configure set region us-east-1

      - name: Create DynamoDB table
        if: false
        run: |
          TABLE_NAME="my-terraform-state-lock-auto-web-${{ env.REPO }}"

          # Check if the table exists
          if ! aws dynamodb describe-table --table-name $TABLE_NAME > /dev/null 2>&1
          then
              # If the table does not exist, create it
              aws dynamodb create-table \
                  --table-name $TABLE_NAME \
                  --attribute-definitions AttributeName=LockID,AttributeType=S \
                  --key-schema AttributeName=LockID,KeyType=HASH \
                  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
                  sleep 60
          fi

      - name: Terraform init and apply
        run: |
          cd aws-s3
          ls && pwd
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_JULIMAXSOFT }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_JULIMAXSOFT }}

      - name: Clean cloufront cache
        if: false
        run: |
          cd aws-s3
          # Ejecutar Terraform y guardar el valor de cloudfront_domain_name en una variable
          cloudfront_domain_name=$(terraform output -raw cloudfront_domain_name | sed -n 's/.*\(\S\{14\}\)\.cloudfront\.net.*/\1.cloudfront.net/p' | head -n 1)
          echo "$cloudfront_domain_name"
          # Extraer el ID de la distribución de CloudFront del nombre de dominio
          distribution_id=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='${cloudfront_domain_name}'].Id" --output text)
          echo "debug distribution_id $distribution_id"
      
          # Crear la invalidación
          aws cloudfront create-invalidation --distribution-id $distribution_id --paths "/*" --profile default
